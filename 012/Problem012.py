''' 
  * Problem012.py
  *
  * Project Euler: Problem 12
  * 
  * Problem: Find the value of the first triangle number to have over five hundred divisors.
  *          Triangle numbers are generated by adding the natural numbers (7th T# = 1+2+3+4+5+6+7=28)
  *
'''

import time
start_time = time.time()

def triangle(n): return n*(n+1)/2

def divisors(num): return [[x] + [num // x] for x in xrange(1, int(num**0.5)+1) if num % x == 0]

divs, current = [], 1
while len(divs) < 250: # because divisors returns a list of pairs
    current += 1
    test = triangle(current)
    divs = divisors(test)

print test, current

print("--- %s seconds ---" % (time.time() - start_time))
